/**
 * Design Tokens
 * Autogenerated from tokens.json.
 * DO NOT EDIT!
 */

import {
  ParsedColorToken,
  ParsedDimensionToken,
  ParsedFontFamilyToken,
} from '@cobalt-ui/core';

export declare const tokens: {
  'color.base.blue.50': ParsedColorToken['$value'];
  'color.base.blue.100': ParsedColorToken['$value'];
  'color.base.blue.200': ParsedColorToken['$value'];
  'color.base.gray.50': ParsedColorToken['$value'];
  'color.base.green.50': ParsedColorToken['$value'];
  'color.base.green.100': ParsedColorToken['$value'];
  'color.base.green.200': ParsedColorToken['$value'];
  'color.base.purple.50': ParsedColorToken['$value'];
  'color.base.purple.100': ParsedColorToken['$value'];
  'color.base.purple.200': ParsedColorToken['$value'];
  'color.base.red.50': ParsedColorToken['$value'];
  'color.base.red.100': ParsedColorToken['$value'];
  'color.base.red.200': ParsedColorToken['$value'];
  'color.base.white.50': ParsedColorToken['$value'];
  'color.base.yellow.50': ParsedColorToken['$value'];
  'color.base.yellow.100': ParsedColorToken['$value'];
  'color.base.yellow.200': ParsedColorToken['$value'];
  'fontStack.mono': ParsedFontFamilyToken['$value'];
  'fontStack.sansSerifDisplay': ParsedFontFamilyToken['$value'];
  'fontStack.sansSerifPrimary': ParsedFontFamilyToken['$value'];
  'space.large': ParsedDimensionToken['$value'];
  'space.medium': ParsedDimensionToken['$value'];
  'space.small': ParsedDimensionToken['$value'];
  'space.xlarge': ParsedDimensionToken['$value'];
  'space.xsmall': ParsedDimensionToken['$value'];
  'space.xxsmall': ParsedDimensionToken['$value'];
};

export declare const meta: {
  'color.base.blue.50': ParsedColorToken;
  'color.base.blue.100': ParsedColorToken;
  'color.base.blue.200': ParsedColorToken;
  'color.base.gray.50': ParsedColorToken;
  'color.base.green.50': ParsedColorToken;
  'color.base.green.100': ParsedColorToken;
  'color.base.green.200': ParsedColorToken;
  'color.base.purple.50': ParsedColorToken;
  'color.base.purple.100': ParsedColorToken;
  'color.base.purple.200': ParsedColorToken;
  'color.base.red.50': ParsedColorToken;
  'color.base.red.100': ParsedColorToken;
  'color.base.red.200': ParsedColorToken;
  'color.base.white.50': ParsedColorToken;
  'color.base.yellow.50': ParsedColorToken;
  'color.base.yellow.100': ParsedColorToken;
  'color.base.yellow.200': ParsedColorToken;
  'fontStack.mono': ParsedFontFamilyToken;
  'fontStack.sansSerifDisplay': ParsedFontFamilyToken;
  'fontStack.sansSerifPrimary': ParsedFontFamilyToken;
  'space.large': ParsedDimensionToken;
  'space.medium': ParsedDimensionToken;
  'space.small': ParsedDimensionToken;
  'space.xlarge': ParsedDimensionToken;
  'space.xsmall': ParsedDimensionToken;
  'space.xxsmall': ParsedDimensionToken;
};

export declare const modes: Record<string, never>;

export declare function token<K extends keyof typeof tokens>(tokenID: K, modeName?: never): typeof tokens[K];
export declare function token<K extends keyof typeof modes, M extends keyof typeof modes[K]>(tokenID: K, modeName: M): typeof modes[K][M];
